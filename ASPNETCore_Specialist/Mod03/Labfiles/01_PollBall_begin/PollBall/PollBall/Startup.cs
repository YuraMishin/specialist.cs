using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using PollBall.Services;
using System;
using System.Collections.Generic;

namespace PollBall
{
  public class Startup
  {
    // This method gets called by the runtime. Use this method to add services to the container.
    // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddSingleton<IPollResultsService, PollResultsService>();
    }

    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    public void Configure(
      IApplicationBuilder app,
      IWebHostEnvironment env,
      IPollResultsService pollResults)
    {
      app.Use(async (context, next) =>
      {
        if (context.Request.Query.ContainsKey("favorite"))
        {
          var selectedValue = context.Request.Query["favorite"];
          /*await context.Response.WriteAsync(
            $"Selected value is {selectedValue}");*/
          SelectedGame selectedGame = (SelectedGame)Enum.Parse(typeof(SelectedGame), selectedValue, true);
          pollResults.AddVote(selectedGame);

          SortedDictionary<SelectedGame, int> gameVotes = pollResults.GetVoteResult();

          foreach (KeyValuePair<SelectedGame, int> currentVote in gameVotes)
          {
            await context.Response.WriteAsync($"<div> Game name: {currentVote.Key}. Votes: {currentVote.Value} </div>");
          }
        }
        else
        {
          await next.Invoke();
        }
      });


      app.UseStaticFiles();
      app.Run(async (context) =>
      {
        await context
          .Response
          .WriteAsync($"This text was generated by the app.Run middleware. wwwroot folder path: {env.WebRootPath}");
      });
    }
  }
}
